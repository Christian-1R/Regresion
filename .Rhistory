for(beta in betas2) {
x = t[1:388]
for(i in 2:388) {
vectores_infectados[i] = (Bv*Sv[i-1]*casos[i-1]-0.001*Iv[i-1])+Iv[i-1]
}
y = vectores_infectados
p = ggplot(data.frame(x, y), aes(x, y)) +
geom_line(color="purple") + ggtitle(paste("βv  =", beta))+ylab(expression(hat(I)[v](t)))+
#ggtitle(substitute(expression(beta[v] == val), list(val = beta))) +
theme_minimal() + xlab("tiempo")
print(p)  # Imprimir cada gráfico por separado
}
for(beta in betas2) {
x = t[1:388]
for(i in 2:388) {
vectores_infectados[i] = (Bv*Sv[i-1]*casos[i-1]-0.001*Iv[i-1])+Iv[i-1]
}
y = vectores_infectados
p = ggplot(data.frame(x, y), aes(x, y)) +
geom_line(color="purple", size=1.4) + ggtitle(paste("βv  =", beta))+ylab(expression(hat(I)[v](t)))+
#ggtitle(substitute(expression(beta[v] == val), list(val = beta))) +
theme_minimal() + xlab("tiempo")
print(p)  # Imprimir cada gráfico por separado
}
library(readxl)
library(readxl)
datosDengue_TABLA <- read_excel("datosDengue-TABLA.xlsx")
View(datosDengue_TABLA)
head(datosDengue_TABLA)
dim(datosDengue_TABLA)
datos_2022 = datosDengue_TABLA[which(datosDengue_TABLA$año == 2022), ]
semanas = seq(as.Date("2015-01-04"), as.Date("2022-06-18"), by = "week")
length(semanas)
# Crear una matriz para conteo de casos por semana y año
conteo = matrix(0, nrow = 53, ncol = length(2015:2022))
for (i in 1:8) {
#year= 2014+i
conteo[1:length(table(datosDengue_TABLA$semana[which(datosDengue_TABLA$año == (2014+i))])), i] =
table(datosDengue_TABLA$semana[which(datosDengue_TABLA$año == (2014+i))])
}
# Asignar NA (los datos que no se conocen)
conteo[53, c(1:5, 7)] = NA
conteo1 = ts(c(conteo))
library(imputeTS)
conteo2 = na_interpolation(conteo1, option = "spline")
casos = c(conteo2)
plot(casos, pch = 20)
semanas
which(semanas == "2014-12-28")
library(npregfast)
tabla = data.frame(semanas,casos[1:389])
tabla$conteo = 1:389  ## añade una nueva columna que cuenta los datos
plot(tabla$semanas, tabla$casos, pch = 20)
np_casos = frfast(tabla$casos ~ tabla$conteo,
smooth = "kernel",
kernel = "gaussian",
p = 3, kbin = 389)
## se crea un nuevo data frame con la estimación realizada
np_df = data.frame(np_casos$p)
np_df
plot(tabla$semanas[1:13], tabla$casos[1:13], pch = 20)
lines(tabla$semanas, np_df$X1, col = "red", lwd = 2)
tabla$casos[1]
plot(np_df$X2, type = "l", lwd = 2)
abline(h = 0, col = "blue", lwd = 2)
abline(v = which(abs(np_df$X2) < 0.03), col = "red", lwd = 2)
np_df$X2[which(abs(np_df$X2) < 0.095)]  #0.03, 0.025, 0.04, 0.035, 0.05
#puntos_infle = c(13, 40, 118, 137, 160, 318, 361, 378)
#puntos_infle = c(13,40, 65, 118,137,160,318,361,378)
puntos_infle = c(13,40, 65, 118,137,160,242,318,361,378)
plot(tabla$semanas, tabla$casos, pch = 20)
lines(tabla$semanas, np_df$X1, col = "red", lwd = 2)
abline(v = tabla$semanas[puntos_infle], col = "purple", lwd = 2)
+
scale_x_date(date_breaks = "6 months", date_labels = "%m-%y")
x <- tabla$semanas
y <- tabla$casos.1.389.
# Convertir los datos en un data frame
df <- data.frame(x=x,y=y)
library(ggplot2)
# Gráfico con ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_vline(xintercept = tabla$semanas[puntos_infle], color = "purple", linetype = "solid", size = 1.2)+
geom_line(aes(x=x,y = np_df$X1), color= "red", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de casos")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
#define function to minimize residual sum of squares
library(deSolve)
min_residuals <- function(data, par, state, t) {
# Definir el sistema de ecuaciones diferenciales
my_ode1 = function(t, state, par) {
with(as.list(c(state, par)), {
##----------ecuaciones------
mu_h = 642.3 / 100000 # Tasa de mortalidad para los humanos (días)
Lambda = 141.90812 / 1000000
lambda = 2800 / 1000000 # Tasa de natalidad de los vectores
#gam = 0.49994 # Tasa de recuperación de los humanos
betav =  0.012744
mu_v = 0.0011
dSh = Lambda - mu_h * Sh - par[1] * Sh * Iv
dIh = par[1] * Sh * Iv - (mu_h + par[2]) * Ih - 0.5025*Ih
dR = par[2] * Ih - mu_h * R
dSv = lambda - mu_v * Sv -  betav* Sv * Ih
dIv = 0.012744  * Sv * Ih - mu_v * Iv
return(list(c(dSh, dIh, dR, dSv, dIv)))
})
}
# Resolver el sistema de ODEs
names(state) = c("Sh", "Ih", "R", "Sv", "Iv")
# Ejecutar la simulación
out <- ode(y = state, times = t, func = my_ode1, parms = par)
# Verificar que el número de datos y resultados coincidan
if (nrow(out) != length(data)) {
stop("La longitud de 'data' no coincide con el número de filas de 'out'.")
}
# Asignar nombres a las columnas
colnames(out) <- c("time", "Sh", "Ih", "R", "Sv", "Iv")
# Calcular los residuos (comparar la columna 'Ih' con 'data')
residuals <- sum((out[, "Ih"] - data)^2)
return(residuals)
}
min_residuals(data = conteo2[1:13]/1000000, par = c(0.1715, 0.49994),
t = 1:13, state = c(552922.50/1000000, 77/1000000, 38.49994/1000000,
2384212/1000000, 1/1000000))
# Llama a la función
min_residuals(data = 1:10, par = c(0.1, 0.1),
state = c(1, 0, 0, 0, 0), t[1:13])
library(rgl)
library(geometry)
# Define x y y
x = seq(-1, 1, by = 0.01)
y = seq(-1, 1, by = 0.01)
# Inicializa la matriz z
z = matrix(0, nrow = length(x), ncol = length(y))
# Llenar la matriz z
for (i in 1:length(x)) {
for (j in 1:length(y)) {
z[i, j] = min_residuals(data = conteo2[1:13]/1000000, par = c(x[i], y[j]),
t = 1:13, state = c(552922.50/1000000, 77/1000000, 38.49994/1000000,
2384212/1000000, 1/1000000))
}
}
# Graficar
library(rgl)  # Asegúrate de tener la librería rgl cargada
plot3d(x, y, z, col = "lightblue", alpha = 0.5, axes = TRUE, box = TRUE)
# Encuentra el valor mínimo de z
min_value = min(z)
# Convierte la matriz z en un data frame
z_table <- as.data.frame(z)
# Añadir las columnas x y y a la tabla
z_table <- cbind(expand.grid(x = x, y = y), head(z_table[, 3], length(x)))
# Verifica el resultado
print(z_table)
plot3d(z_table[,1], z_table[,2], z_table[,3], col = "lightblue", alpha = 0.5, axes = TRUE, box = TRUE,
xlab= expression(beta[h]), ylab=expression(gamma), zlab="SCE")
library(bbmle)
library(deSolve)
library(bbmle)
library(deSolve)
# Definir la función del ODE
my_ode1 = function(t, state, par) {
with(as.list(c(state, par)), {
##----------ecuaciones------
mu_h = 642.3 / 100000 # Tasa de mortalidad para los humanos (días)
Lambda = 141.90812 / 1000000
lambda = 2800 / 1000000 # Tasa de natalidad de los vectores
betav =  0.012744
mu_v = 0.0011
# Definir ecuaciones diferenciales
dSh = Lambda - mu_h * Sh - par[1] * Sh * Iv
dIh = par[1] * Sh * Iv - (mu_h + par[2]) * Ih - 0.5025 * Ih
dR = par[2] * Ih - mu_h * R
dSv = lambda - mu_v * Sv - betav * Sv * Ih
dIv = 0.012744 * Sv * Ih - mu_v * Iv
# Devolver los cambios en el estado
return(list(c(dSh, dIh, dR, dSv, dIv)))
})
}
# Estado inicial
state = c(Sh = 1500, Ih = 0.2, R = 1, Sv = 1000, Iv = 10)
# Ejecutar la simulación
out2 <- ode(y = state, times = 1:20, func = my_ode1, parms = c(0.0019, 0.00197))
nuevos_datos_infectados = out2[,"Ih"]
for(i in 1:20){
if(i%% 2==0){
nuevos_datos_infectados[i]= out2[i,"Ih"]+10
}
else{
nuevos_datos_infectados[i]= out2[i,"Ih"]-10
}
}
plot(nuevos_datos_infectados, pch=20, main="ajuste de datos", xlab="Tiempo", ylab="Infectados")
x = t[1:20]
y = out2[,3]
z =  nuevos_datos_infectados
Nuevadata = data.frame(x=x,y=y)
library(ggplot2)
ggplot(Nuevadata,aes(x=x,y=y))+
geom_point(aes(x=x,y=nuevos_datos_infectados[1:20]), color="red",linetype="solid")+
geom_line(aes(x=x,y=out2[,3]), color= "blue2",linetype="solid")+
xlab("Tiempo")+
ylab(expression(I[h](t)))
t= tabla$semanas
length(t)
as.numeric(t[2]-t[1])
Lambda = (imputacion_pob$X1[53:442] - imputacion_pob$X1[52:441])
mu_j = (Lambda[2:390]-Lambda[1:389]- imputacion_pob$X1[53:442] + imputacion_pob$X1[52:441] + 0.5025*tabla$casos[52:441])/
(imputacion_pob$X1[53:442])
plot(mu_j, pch = 20)
dataMu = data.frame(x=t, y=mu_j[1:389])
library(ggplot2)
ggplot(dataMu, aes(x=t,y=mu_j[1:389])) +
geom_line(color="red") +
xlab("Año") +
ylab(expression(hat(mu)[h]))
Bh= c()
for (i in 1:389){
Bh[i]=(np_df$X1[i+1]-np_df$X1[i]+((642.3/100000)+0.49994+0.5025)*np_df$X1[i])
}
plot(t[1:389], Bh[1:389],pch=20,xlab = "Mes-Año", ylab=
"Beta_h", col="blue")
## Pasamos el gráfico a ggplot2
x <- t[1:389]
v <- Bh[1:389]
DataBeta = data.frame(x=t[1:389], y=Bh[1:389])
ggplot(DataBeta,aes(x=t,y=Bh[1:389]))+
geom_line(color="blue", linewidth=1.4)+xlab("Año") +
ylab(expression(hat(beta)[h]*S[h]*I[v]))
I_h = c()
I_h[1]=77
for (i in (2:388)){
Ih[i] = Ih[i-1] -(642.3/100000+0.49994+0.5025)*Ih[i-1] + Bh[i-1]
}
Ih = c()
Ih[1]=77
for (i in (2:388)){
Ih[i] = Ih[i-1] -(642.3/100000+0.49994+0.5025)*Ih[i-1] + Bh[i-1]
}
plot(Ih,pch=20)
DataSh = data.frame(x=t[1:388],y= Ih[1:388])
ggplot(DataSh, aes(x=t[1:388],y=Ih[1:388])) +
geom_line(color="red", linewidth=1.4) +
xlab("Año") +
ylab(expression(hat(I)[h]))
ggplot(DataSh, aes(x=t[1:388],y=Ih[1:388])) +
geom_line(color="pink", linewidth=1.4) +
xlab("Año") +
ylab(expression(hat(I)[h]))
ggplot(DataSh, aes(x=t[1:388],y=Ih[1:388])) +
geom_line(color="orange", linewidth=1.4) +
xlab("Año") +
ylab(expression(hat(I)[h]))
colors
colors()
ggplot(DataSh, aes(x=t[1:388],y=Ih[1:388])) +
geom_line(color="red1", linewidth=1.4) +
xlab("Año") +
ylab(expression(hat(I)[h]))
ggplot(DataSh, aes(x=t[1:388],y=Ih[1:388])) +
geom_line(color="turquoise3", linewidth=1.4) +
xlab("Año") +
ylab(expression(hat(I)[h]))
library(readxl)
datos_DEN = data.frame(datosDengue_TABLA)
head(datosDengue_TABLA)
dim(datosDengue_TABLA)
datos_2022 = datosDengue_TABLA[which(datosDengue_TABLA$año == 2022), ]
semanas = seq(as.Date("2015-01-04"), as.Date("2022-06-18"), by = "week")
length(semanas)
# Crear una matriz para conteo de casos por semana y año
conteo = matrix(0, nrow = 53, ncol = length(2015:2022))
for (i in 1:8) {
#year= 2014+i
conteo[1:length(table(datosDengue_TABLA$semana[which(datosDengue_TABLA$año == (2014+i))])), i] =
table(datosDengue_TABLA$semana[which(datosDengue_TABLA$año == (2014+i))])
}
# Asignar NA (los datos que no se conocen)
conteo[53, c(1:5, 7)] = NA
conteo1 = ts(c(conteo))
library(imputeTS)
conteo2 = na_interpolation(conteo1, option = "spline")
casos = c(conteo2)
plot(casos, pch = 20)
semanas
which(semanas == "2014-12-28")
library(npregfast)
tabla = data.frame(semanas,casos[1:389])
tabla$conteo = 1:389  ## añade una nueva columna que cuenta los datos
plot(tabla$semanas, tabla$casos, pch = 20)
np_casos = frfast(tabla$casos ~ tabla$conteo,
smooth = "kernel",
kernel = "gaussian",
p = 3, kbin = 389)
## se crea un nuevo data frame con la estimación realizada
np_df = data.frame(np_casos$p)
np_df
plot(tabla$semanas[1:13], tabla$casos[1:13], pch = 20)
lines(tabla$semanas, np_df$X1, col = "red", lwd = 2)
tabla$casos[1]
plot(np_df$X2, type = "l", lwd = 2)
abline(h = 0, col = "blue", lwd = 2)
abline(v = which(abs(np_df$X2) < 0.03), col = "red", lwd = 2)
np_df$X2[which(abs(np_df$X2) < 0.095)]  #0.03, 0.025, 0.04, 0.035, 0.05
#puntos_infle = c(13, 40, 118, 137, 160, 318, 361, 378)
#puntos_infle = c(13,40, 65, 118,137,160,318,361,378)
puntos_infle = c(13,40, 65, 118,137,160,242,318,361,378)
plot(tabla$semanas, tabla$casos, pch = 20)
lines(tabla$semanas, np_df$X1, col = "red", lwd = 2)
abline(v = tabla$semanas[puntos_infle], col = "purple", lwd = 2)
+
scale_x_date(date_breaks = "6 months", date_labels = "%m-%y")
x <- tabla$semanas
y <- tabla$casos.1.389.
# Convertir los datos en un data frame
df <- data.frame(x=x,y=y)
library(ggplot2)
# Gráfico con ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_vline(xintercept = tabla$semanas[puntos_infle], color = "purple", linetype = "solid", size = 1.2)+
geom_line(aes(x=x,y = np_df$X1), color= "red", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de casos")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
# Gráfico con ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1), color= "red", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
#Lambda = mean(7379.222/365)*7
#t= regresion_np$x
t= tabla$semanas
length(t)
as.numeric(t[2]-t[1])
Lambda = (imputacion_pob$X1[53:442] - imputacion_pob$X1[52:441])
mu_j = (Lambda[2:390]-Lambda[1:389]- imputacion_pob$X1[53:442] + imputacion_pob$X1[52:441] + 0.5025*tabla$casos[52:441])/
(imputacion_pob$X1[53:442])
plot(mu_j, pch = 20)
dataMu = data.frame(x=t, y=mu_j[1:389])
library(ggplot2)
ggplot(dataMu, aes(x=t,y=mu_j[1:389])) +
geom_line(color="red") +
xlab("Año") +
ylab(expression(hat(mu)[h]))
Bh= c()
for (i in 1:389){
Bh[i]=(np_df$X1[i+1]-np_df$X1[i]+((642.3/100000)+0.49994+0.5025)*np_df$X1[i])
}
plot(t[1:389], Bh[1:389],pch=20,xlab = "Mes-Año", ylab=
"Beta_h", col="blue")
## Pasamos el gráfico a ggplot2
x <- t[1:389]
v <- Bh[1:389]
DataBeta = data.frame(x=t[1:389], y=Bh[1:389])
ggplot(DataBeta,aes(x=t,y=Bh[1:389]))+
geom_line(color="blue", linewidth=1.4)+xlab("Año") +
ylab(expression(hat(beta)[h]*S[h]*I[v]))
Rh = c()
t[1]
casos[1]
Rh[1]= casos[1]*0.99631951
for (i in 1:389){
Rh = c(Rh, (0.49994*np_df$X1[i]-(642.3/100000)*Rh[i])+Rh[i])
}
plot(t[1:389], Rh[1:389], pch=20, xlab="Mes-Año",ylab="R_h", col="blue")
ggplot(DataBeta, aes(x=t[1:389],y=Rh[1:389])) +
geom_line(color= "green", linewidth=1.4) +
xlab("Año") +
ylab(expression(hat(R)[h]))
Sh = c()
casos[1]
Sh[1] =  imputacion_pob$X1[53]-Rh[1]-77
for (i in (2:388)){
Sh[i] = Sh[i-1]+(Lambda[i-1]- (642.3/100000)*Sh[i-1]- Bh[i-1])
}
plot(Sh,pch=20)
DataSh = data.frame(x=t[1:388],y= Sh[1:388])
ggplot(DataSh, aes(x=t[1:388],y=Sh[1:388])) +
geom_line(color="blue", linewidth=1.4) +
xlab("Año") +
ylab(expression(hat(S)[h]))
###################### Estimación para I_h #######################
Ih = c()
Ih[1]=77
for (i in (2:388)){
Ih[i] = Ih[i-1] -(642.3/100000+0.49994+0.5025)*Ih[i-1] + Bh[i-1]
}
plot(Ih,pch=20)
DataSh = data.frame(x=t[1:388],y= Ih[1:388])
ggplot(DataSh, aes(x=t[1:388],y=Ih[1:388])) +
geom_line(color="turquoise3", linewidth=1.4) +
xlab("Año") +
ylab(expression(hat(I)[h]))
library(readxl)
library(readxl)
datosDengue_TABLA <- read_excel("datosDengue-TABLA.xlsx")
View(datosDengue_TABLA)
datos_DEN = data.frame(datosDengue_TABLA)
semanas = seq(as.Date("2015-01-04"), as.Date("2022-06-18"), by = "week")
length(semanas)
# Crear una matriz para conteo de casos por semana y año
conteo = matrix(0, nrow = 53, ncol = length(2015:2022))
for (i in 1:8) {
#year= 2014+i
conteo[1:length(table(datosDengue_TABLA$semana[which(datosDengue_TABLA$año == (2014+i))])), i] =
table(datosDengue_TABLA$semana[which(datosDengue_TABLA$año == (2014+i))])
}
# Asignar NA (los datos que no se conocen)
datosDengue_TABLA$semana[which(datosDengue_TABLA$año == (2015))
conteo[53, c(1:5, 7)] = NA
conteo1 = ts(c(conteo))
library(imputeTS)
conteo2 = na_interpolation(conteo1, option = "spline")
casos = c(conteo2)
plot(casos, pch = 20)
semanas
which(semanas == "2014-12-28")
library(npregfast)
tabla = data.frame(semanas,casos[1:389])
tabla$conteo = 1:389  ## añade una nueva columna que cuenta los datos
plot(tabla$semanas, tabla$casos, pch = 20)
np_casos = frfast(tabla$casos ~ tabla$conteo,
smooth = "kernel",
kernel = "gaussian",
p = 3, kbin = 389)
## se crea un nuevo data frame con la estimación realizada
np_df = data.frame(np_casos$p)
x <- tabla$semanas
y <- tabla$casos.1.389.
# Convertir los datos en un data frame
df <- data.frame(x=x,y=y)
library(ggplot2)
# Gráfico con ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1), color= "red", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1), color= "red", linetype="solid",size=1.5)+
geom_line(aes(x=x,y=Ih[1:388]), color="turquoise", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
length(y)
length(Ih)
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1[1:388]), color= "red", linetype="solid",size=1.5)+
geom_line(aes(x=x,y=Ih[1:388]), color="turquoise", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
np_df$X1[1:388]
Ih[1:388]
x <- tabla$semanas
y <- tabla$casos.1.389.
length(Ih)
# Convertir los datos en un data frame
df <- data.frame(x=x,y=y)
library(ggplot2)
# Gráfico con ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1[1:388]), color= "red", linetype="solid",size=1.5)+
geom_line(aes(x=x,y=Ih[1:388]), color="turquoise", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
library(ggplot2)
# Gráfico con ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1[1:388]), color= "red", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
library(ggplot2)
# Gráfico con ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1), color= "red", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1), color= "red", linetype="solid",size=1.5)+
geom_line(aes(x=x,y=Ih[1:388]), color="turquoise", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1[1:388]), color= "red", linetype="solid",size=1.5)+
geom_line(aes(x=x,y=Ih[1:388]), color="turquoise", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", size = 1) +
geom_line(aes(x=x,y = np_df$X1[1:nrow(df)]), color= "red", linetype="solid",size=1.5)+
geom_line(aes(x=x,y=Ih[1:nrow(df)]), color="turquoise", linetype="solid",size=1.5)+
xlab("Mes-Año") +
ylab("No. de personas infectadas")+
scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")
